#! /usr/bin/python
#  coding: utf-8

import sys
import os
import time

server_nodes = {}

topo_detail = open('topology_detail.txt','r')

line = topo_detail.readline()
item = line.split()

#start mapping nodes
while len(item) == 0 or item[0] != 'node':
    line = topo_detail.readline()
    item = line.split()


line = topo_detail.readline()
print "line : " + line
item = line.split()
while len(item) > 0:
    #found server
    if "." in item[1]:
        print "found server"
        print item[0] + " " + item[1] + " " + item[2]
        server_dict = {}
        server_dict['name'] = item[0]
        server_dict['queue'] = item[2]
        #use ip as a key in server_nodes
        server_nodes[item[1]] = server_dict

    line = topo_detail.readline()
    print "line : " + line
    item = line.split()

#all servers are in server_nodes
print "num of argv : " + str(len(sys.argv))
print sys.argv

print server_nodes

if len(sys.argv) > 1:
    controller_ip = sys.argv[1]
    host_ip = sys.argv[2]
    server_ip = sys.argv[3]
    mode = sys.argv[4]
    name = sys.argv[5]
    if mode == 'add':
        server_info = server_nodes[server_ip]
        queue_id = server_info['queue']


        os.system('./qospath2.py -a -N "%s" -c %s -S %s -D %s -J ' % (name+"-f",controller_ip,host_ip,server_ip)  + "'" + '{"eth-type":"0x0800","protocol":"6","queue":"%s"}' % queue_id + "'")
        os.system('./qospath2.py -a -N "%s" -c %s -S %s -D %s -J ' % (name+"-b",controller_ip,server_ip,host_ip)  + "'" + '{"eth-type":"0x0800","protocol":"6","queue":"%s"}' % queue_id + "'")

    elif mode == 'del':

        os.system('./qospath2.py -d -N "%s" -c %s' % (name+"-f",controller_ip))
        os.system('./qospath2.py -d -N "%s" -c %s' % (name+"-b",controller_ip))

    
    #flag_set_queue = open('flag_set_queue.txt','w')
    #flag_set_queue = io.open('flag_set_queue','w',encoding='utf-8')
    #flag_set_queue.write( "T" )
    #flag_set_queue.close()

    #tmp_flag = open('flag_set_queue.txt.tmp2','w')
    #tmp_flag.write('T')
    #tmp_flag.flush()
    #os.fsync(tmp_flag.fileno())
    #tmp_flag.close()

    #os.rename('flag_set_queue.txt', 'flag_set_queue.txt.bak2')
    #os.rename('flag_set_queue.txt.tmp2', 'flag_set_queue.txt')
    #os.remove('flag_set_queue.txt.bak2')

time.sleep(3)
